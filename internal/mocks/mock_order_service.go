// Code generated by MockGen. DO NOT EDIT.
// Source: order_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "MockOrderService/internal/domain/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepositoryService is a mock of OrderRepository interface.
type MockOrderRepositoryService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryServiceMockRecorder
}

// MockOrderRepositoryServiceMockRecorder is the mock recorder for MockOrderRepositoryService.
type MockOrderRepositoryServiceMockRecorder struct {
	mock *MockOrderRepositoryService
}

// NewMockOrderRepositoryService creates a new mock instance.
func NewMockOrderRepositoryService(ctrl *gomock.Controller) *MockOrderRepositoryService {
	mock := &MockOrderRepositoryService{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepositoryService) EXPECT() *MockOrderRepositoryServiceMockRecorder {
	return m.recorder
}

// GetRecentOrders mocks base method.
func (m *MockOrderRepositoryService) GetRecentOrders(ctx context.Context, limit int) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecentOrders", ctx, limit)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecentOrders indicates an expected call of GetRecentOrders.
func (mr *MockOrderRepositoryServiceMockRecorder) GetRecentOrders(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentOrders", reflect.TypeOf((*MockOrderRepositoryService)(nil).GetRecentOrders), ctx, limit)
}

// SaveOrder mocks base method.
func (m *MockOrderRepositoryService) SaveOrder(ctx context.Context, order *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockOrderRepositoryServiceMockRecorder) SaveOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockOrderRepositoryService)(nil).SaveOrder), ctx, order)
}

// MockCacheRepositoryService is a mock of CacheRepository interface.
type MockCacheRepositoryService struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepositoryServiceMockRecorder
}

// MockCacheRepositoryServiceMockRecorder is the mock recorder for MockCacheRepositoryService.
type MockCacheRepositoryServiceMockRecorder struct {
	mock *MockCacheRepositoryService
}

// NewMockCacheRepositoryService creates a new mock instance.
func NewMockCacheRepositoryService(ctrl *gomock.Controller) *MockCacheRepositoryService {
	mock := &MockCacheRepositoryService{ctrl: ctrl}
	mock.recorder = &MockCacheRepositoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepositoryService) EXPECT() *MockCacheRepositoryServiceMockRecorder {
	return m.recorder
}

// IsCacheEmpty mocks base method.
func (m *MockCacheRepositoryService) IsCacheEmpty(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCacheEmpty", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCacheEmpty indicates an expected call of IsCacheEmpty.
func (mr *MockCacheRepositoryServiceMockRecorder) IsCacheEmpty(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCacheEmpty", reflect.TypeOf((*MockCacheRepositoryService)(nil).IsCacheEmpty), ctx)
}

// SaveOrder mocks base method.
func (m *MockCacheRepositoryService) SaveOrder(ctx context.Context, order *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockCacheRepositoryServiceMockRecorder) SaveOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockCacheRepositoryService)(nil).SaveOrder), ctx, order)
}
